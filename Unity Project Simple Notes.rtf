{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red51\green51\blue51;\red0\green150\blue149;\red51\green100\blue164;
\red245\green125\blue0;\red196\green76\blue87;\red136\green136\blue136;}
\margl1440\margr1440\vieww18260\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Unity Project Simple Notes
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 What to do next:\ulnone \
-Enemy Collision with Player \
-Enemy Collision with Enemy\
-Enemy with Platform Effector 2D\
-Create C# Script for Platform \
-Player Health and Damage\
-Player Invulnerability\
-Troubleshoot fallCheck\
\
\ul Useful code for 2D: \ulnone \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 rb.AddForce (\cf3 new\cf2  \cf4 Vector2\cf2 (\cf5 0\cf2 ,\cf5 10\cf2 ), \cf4 ForceMode2D\cf2 .Impulse);\uc0\u8232 -adds a force, either Force or Impulse\
-rb is a Rigidbody2D private variable (using GetComponent)\
\
collide.offset = \cf3 new\cf2  \cf4 Vector2\cf2  (\cf5 0\cf2 ,\cf5 0\cf2 );\
-chages the location of the collider\
-collide is a BoxCollider2D private variable (using GetComponent)\
\
center for objects:\
-collide.offset\uc0\u8232 	-collide is a BoxCollider2D private variable (using GetComponent)\
-transform.position\uc0\u8232 \
calling the object that is connected to the script:\
-this.gameobject\
\
\pard\pardeftab720\partightenfactor0
\cf2 ignore collision between game objects in a certain layer\
\cf4 -Physics2D\cf2 .IgnoreLayerCollision(\cf4 LayerMask\cf2 .NameToLayer(\cf5 "Player"\cf2 ), \cf4 LayerMask\cf2 .NameToLayer(\cf5 "Enemy"\cf2 ), \cf3 true\cf2 );\uc0\u8232 \u8232 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \ul Old code:
\f1 \cf2 \ulnone \
\pard\pardeftab720\partightenfactor0
\cf2 Testing RaycastHit2D:\
		\cf3 public\cf2  \cf3 float\cf2  raycastLength = \cf5 0f\cf2 ;\uc0\u8232 		\cf3 public\cf2  \cf3 int\cf2  layer = \cf5 0\cf2 ;\uc0\u8232 		\cf3 public\cf2  \cf3 float\cf2  minDepth = \cf4 Mathf\cf2 .Infinity;\uc0\u8232 		\cf3 public\cf2  \cf3 float\cf2  maxDepth = \cf4 Mathf\cf2 .Infinity;\uc0\u8232 \
		\cf4 RaycastHit2D\cf2  hit = \cf4 Physics2D\cf2 .Raycast(transform.position, -\cf4 Vector2\cf2 .up);\uc0\u8232 		\cf4 RaycastHit2D\cf2  hit = \cf4 Physics2D\cf2 .Raycast(transform.position, \cf4 Vector2\cf2 .up, \cf6 raycastLength\cf2 , \cf6 layer\cf2 , \cf5 0\cf2 , \cf5 0\cf2 );\uc0\u8232 		\cf4 RaycastHit2D\cf2  hit = \cf4 Physics2D\cf2 .Raycast(transform.position, -\cf4 Vector2\cf2 .up);\uc0\u8232 		\cf3 if\cf2 (hit.collider == \cf3 null\cf2 ) \{\uc0\u8232 			walkSpeed = walkSpeed * -\cf5 1\cf2 ;\uc0\u8232 		\}\u8232 		\cf3 if\cf2 (hit.collider)\{\uc0\u8232 			\cf4 Debug\cf2 .Log (\cf5 "well?"\cf2 );\uc0\u8232 		\}\u8232 		\cf4 Debug\cf2 .DrawLine (transform.position, hit.point, \cf4 Color\cf2 .cyan);\uc0\u8232 \
Working on Health C# Script:\
\pard\pardeftab720\partightenfactor0
\cf3 	for\cf2 (\cf3 int\cf2  i = \cf5 0\cf2 ; i < startingHealth; ++i)\{\uc0\u8232 
\f2\i \cf7 	//			if(i == 0)\{\uc0\u8232 	//				health = new GameObject("Health" + i);\u8232 	//			\}\u8232 	//			healthBar[i] = new GameObject("Health" + i);\u8232 	//			healthBar[i].transform.parent = GameObject.Find("Health Bar").transform;\u8232 	//			else \{\u8232 
\f1\i0 \cf2 				
\f2\i \cf7 //			\}\uc0\u8232 
\f1\i0 \cf2 				healthBar[i] = health;\uc0\u8232 
\f2\i \cf7 	//			healthBar[i].name = "Health " + i;\uc0\u8232 	//			Debug.Log(healthBar[i]);\u8232 
\f1\i0 \cf2 				\cf3 if\cf2 (healthBar [i] != \cf3 null\cf2 ) \{\uc0\u8232 
\f2\i \cf7 	//				Debug.Log (firstHeart);\uc0\u8232 	//				Debug.Log(new Vector3 (firstHeart.x - ((i + 1) * 1.12918f), firstHeart.y, firstHeart.z));\u8232 	//				Debug.Log(new Vector3 (7 - i, 6, 1f));\u8232 
\f1\i0 \cf2 					healthBar[i] = (\cf4 GameObject\cf2 ) Instantiate (healthBar [i], \cf3 new\cf2  \cf4 Vector3\cf2  (firstHeart.x - (i * \cf5 1.12918f\cf2 ), 	firstHeart.y, firstHeart.z), \cf4 Quaternion\cf2 .identity, \cf4 GameObject\cf2 .Find (\cf5 "Health Bar"\cf2 ).transform);\uc0\u8232 
\f2\i \cf7 	//				Instantiate (healthBar [i], firstHeart, Quaternion.identity, GameObject.Find ("Health Bar").transform);\uc0\u8232 
\f1\i0 \cf2 			\}\uc0\u8232 				healthBar[i].name = \cf5 "Health "\cf2  + i;\uc0\u8232 \u8232 				healthBar[i] = \cf4 Resources\cf2 .Load (\cf5 "Health Bar"\cf2 ) \cf3 as\cf2  \cf4 GameObject\cf2 ;\uc0\u8232 
\f2\i \cf7 	//			healthBar[i].AddComponent<SpriteRenderer>();\uc0\u8232 	//			healthBar[i].transform.parent = GameObject.Find("Health Bar").transform;\u8232 	//			Sprite spriteImage = (Sprite)AssetDatabase.LoadAssetAtPath ("Assets/Sprites/Square.png", typeof(Sprite));\u8232 	//			healthBar[i].AddComponent<SpriteRenderer>();\u8232 	//			sprite = healthBar[i].GetComponent<SpriteRenderer>();\u8232 	//			sprite.sprite = spriteImage;\u8232 	//			sprite.color = Color.black;\u8232 	//			health.transform.position = new Vector3 (firstHeart.x - (i * 1.12918f), firstHeart.y, firstHeart.z);\u8232 
\f1\i0 \cf2 			\}\uc0\u8232 }